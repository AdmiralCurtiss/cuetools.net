Index: projects/vs2008/UnitTests/Form1.cs
===================================================================
--- projects/vs2008/UnitTests/Form1.cs	(revision 133)
+++ projects/vs2008/UnitTests/Form1.cs	(working copy)
@@ -629,7 +629,7 @@
 
             try
             {
-                img0 = c.CreateImage2D(MemFlags.READ_WRITE, ImageFormat.RGBA8U, imgWidth, imgHeight);
+                img0 = c.CreateImage2D(MemFlags.READ_WRITE, CLImageFormat.RGBA8U, imgWidth, imgHeight);
                 mem0 = c.CreateBuffer(MemFlags.READ_WRITE, bufLen, IntPtr.Zero);
 
                 Array.Clear(cmpData, 0, cmpData.Length);
@@ -1198,7 +1198,7 @@
 
             try
             {
-                img0 = c.CreateImage2D(MemFlags.READ_WRITE, ImageFormat.RGBA8U, imgWidth, imgHeight);
+                img0 = c.CreateImage2D(MemFlags.READ_WRITE, CLImageFormat.RGBA8U, imgWidth, imgHeight);
                 mem0 = c.CreateBuffer(MemFlags.READ_WRITE, bufLen, IntPtr.Zero);
 
                 Array.Clear(cmpData, 0, cmpData.Length);
@@ -1405,9 +1405,9 @@
 
             try
             {
-                img0 = c.CreateImage2D(MemFlags.READ_WRITE, ImageFormat.RGBA8U, imgWidth, imgHeight);
-                img1 = c.CreateImage2D(MemFlags.READ_WRITE, ImageFormat.RGBA8U, imgWidth, imgHeight);
-                img2 = c.CreateImage2D(MemFlags.READ_WRITE, ImageFormat.RGBA8U, imgWidth, imgHeight);
+                img0 = c.CreateImage2D(MemFlags.READ_WRITE, CLImageFormat.RGBA8U, imgWidth, imgHeight);
+                img1 = c.CreateImage2D(MemFlags.READ_WRITE, CLImageFormat.RGBA8U, imgWidth, imgHeight);
+                img2 = c.CreateImage2D(MemFlags.READ_WRITE, CLImageFormat.RGBA8U, imgWidth, imgHeight);
 
                 Array.Clear(cmpData, 0, cmpData.Length);
                 fixed (byte* pSrc = srcData)
Index: projects/vs2010/OpenCLNet.suo
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
Index: projects/vs2010/OpenCLNet/OpenCLNet.csproj
===================================================================
--- projects/vs2010/OpenCLNet/OpenCLNet.csproj	(revision 133)
+++ projects/vs2010/OpenCLNet/OpenCLNet.csproj	(working copy)
@@ -10,8 +10,9 @@
     <AppDesignerFolder>Properties</AppDesignerFolder>
     <RootNamespace>OpenCLNet</RootNamespace>
     <AssemblyName>OpenCLNet</AssemblyName>
-    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
+    <TargetFrameworkVersion>v2.0</TargetFrameworkVersion>
     <FileAlignment>512</FileAlignment>
+    <TargetFrameworkProfile />
   </PropertyGroup>
   <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
     <DebugSymbols>true</DebugSymbols>
@@ -73,11 +74,7 @@
   </PropertyGroup>
   <ItemGroup>
     <Reference Include="System" />
-    <Reference Include="System.Core" />
     <Reference Include="System.Drawing" />
-    <Reference Include="System.Xml.Linq" />
-    <Reference Include="System.Data.DataSetExtensions" />
-    <Reference Include="Microsoft.CSharp" />
     <Reference Include="System.Data" />
     <Reference Include="System.Xml" />
   </ItemGroup>
Index: source/CLImage.cs
===================================================================
--- source/CLImage.cs	(revision 133)
+++ source/CLImage.cs	(working copy)
@@ -25,7 +25,6 @@
 
 using System;
 using System.Collections.Generic;
-using System.Linq;
 using System.Text;
 using System.Runtime.InteropServices;
 
Index: source/Device.cs
===================================================================
--- source/Device.cs	(revision 133)
+++ source/Device.cs	(working copy)
@@ -35,7 +35,7 @@
 {
     unsafe public class Device : IDisposable, InteropTools.IPropertyContainer
     {
-        protected HashSet<string> ExtensionHashSet = new HashSet<string>();
+        protected List<string> ExtensionHashSet = new List<string>();
         private bool IsSubDevice;
         // Track whether Dispose has been called.
         private bool disposed = false;
Index: source/Event.cs
===================================================================
--- source/Event.cs	(revision 133)
+++ source/Event.cs	(working copy)
@@ -25,7 +25,6 @@
 
 using System;
 using System.Collections.Generic;
-using System.Linq;
 using System.Text;
 using System.Threading;
 
Index: source/Exceptions.cs
===================================================================
--- source/Exceptions.cs	(revision 133)
+++ source/Exceptions.cs	(working copy)
@@ -25,7 +25,6 @@
 
 using System;
 using System.Collections.Generic;
-using System.Linq;
 using System.Text;
 
 namespace OpenCLNet
Index: source/OpenCLAPI.cs
===================================================================
--- source/OpenCLAPI.cs	(revision 133)
+++ source/OpenCLAPI.cs	(working copy)
@@ -25,7 +25,6 @@
 
 using System;
 using System.Collections.Generic;
-using System.Linq;
 using System.Text;
 using System.Runtime.InteropServices;
 using System.Diagnostics;
Index: source/OpenCLManager.cs
===================================================================
--- source/OpenCLManager.cs	(revision 133)
+++ source/OpenCLManager.cs	(working copy)
@@ -27,7 +27,6 @@
 using System.Collections.Generic;
 using System.ComponentModel;
 using System.Diagnostics;
-using System.Linq;
 using System.Text;
 using System.IO;
 using System.Xml;
@@ -257,9 +256,8 @@
                 throw new OpenCLNotAvailableException();
 
             Platform = OpenCL.GetPlatform(platformNumber);
-            var devices = from d in Platform.QueryDevices(deviceType)
-                    where ((RequireImageSupport && d.ImageSupport == true) || !RequireImageSupport) && d.HasExtensions( RequiredExtensions.ToArray<string>() )
-                    select d;
+            var devices = new List<Device>(Platform.QueryDevices(deviceType));
+            devices.RemoveAll(d => (d.ImageSupport != true && RequireImageSupport) || !d.HasExtensions(RequiredExtensions.ToArray()));
             IntPtr[] properties = new IntPtr[]
             {
                 (IntPtr)ContextProperties.PLATFORM, Platform,
@@ -266,7 +264,7 @@
                 IntPtr.Zero
             };
 
-            if (devices.Count() == 0)
+            if (devices.Count == 0)
                 throw new OpenCLException("CreateDefaultContext: No OpenCL devices found that matched filter criteria.");
 
             CreateContext(Platform, properties, devices);
@@ -308,7 +306,7 @@
                 throw new OpenCLNotAvailableException();
 
             Platform = platform;
-            Context = platform.CreateContext( contextProperties, devices.ToArray<Device>(), notify, userData );
+            Context = platform.CreateContext( contextProperties, new List<Device>(devices).ToArray(), notify, userData );
             CQ = new CommandQueue[Context.Devices.Length];
             for (int i = 0; i < Context.Devices.Length; i++)
                 CQ[i] = Context.CreateCommandQueue(Context.Devices[0]);
Index: source/Platform.cs
===================================================================
--- source/Platform.cs	(revision 133)
+++ source/Platform.cs	(working copy)
@@ -81,7 +81,7 @@
         Device[] DeviceList;
         IntPtr[] DeviceIDs;
 
-        protected HashSet<string> ExtensionHashSet = new HashSet<string>();
+        protected List<string> ExtensionHashSet = new List<string>();
         protected Dictionary<string, Extension> extensionSupport = new Dictionary<string, Extension>();
         DirectX9Extension DirectX9Extension;
         DirectX10Extension DirectX10Extension;
Index: source/Sampler.cs
===================================================================
--- source/Sampler.cs	(revision 133)
+++ source/Sampler.cs	(working copy)
@@ -25,7 +25,6 @@
 
 using System;
 using System.Collections.Generic;
-using System.Linq;
 using System.Text;
 
 namespace OpenCLNet
Index: source/SimpleOCLHelper.cs
===================================================================
--- source/SimpleOCLHelper.cs	(revision 133)
+++ source/SimpleOCLHelper.cs	(working copy)
@@ -25,7 +25,6 @@
 
 using System;
 using System.Collections.Generic;
-using System.Linq;
 using System.Text;
 
 namespace OpenCLNet
